/*	
	class ViewLabelProvider extends LabelProvider {

		@Override
		public String getText(Object obj) {
			return obj.toString();
		}
		
		@Override
		public Image getImage(Object obj) {
			System.out.println("ViewLabelProvider.getImage() called: " + obj.toString());
			String imageKey = ISharedImages.IMG_OBJ_ELEMENT;
//			if (obj instanceof TreeParent) imageKey = ISharedImages.IMG_OBJ_FOLDER;
			return workbench.getSharedImages().getImage(imageKey);
		}
	}
	
	class ViewLabelProvider2 extends CellLabelProvider {

		public String getText(Object obj) {
			return obj.toString();
		}
		
		public Image getImage(Object obj) {
			System.out.println("ViewLabelProvider2.getImage() called: " + obj.toString());
			String imageKey = ISharedImages.IMG_OBJ_ELEMENT;
//			if (obj instanceof TreeParent) imageKey = ISharedImages.IMG_OBJ_FOLDER;
			return workbench.getSharedImages().getImage(imageKey);
		}

		@Override
		public void update(ViewerCell cell) {
			// TODO Auto-generated method stub
//			if (cell.get)
		}
	}
*/
	
	
	
	
		class RootLevelLabelProvider extends LabelProvider implements ITableLabelProvider {
		
//		final int col;
		
		public RootLevelLabelProvider() {
//			this.col = col;
		}

/*		@Override
		public String getText(Object obj) {
//			if (obj instanceof TreeNode) {
//				TreeNode o = (TreeNode)obj;
//				if (col > o.content.length-1) return "toobig2:" + obj.toString();
//				return o.content[col];
//			}
			return "nope:" + obj.toString();
		}
*/		
		@Override
		public Image getImage(Object obj) {
//			System.out.println("AaronViewLabelProvider.getImage() called: " + obj.toString());
//			String imageKey = ISharedImages.IMG_OBJ_ELEMENT;
//			if (obj instanceof TreeParent) imageKey = ISharedImages.IMG_OBJ_FOLDER;
//			return workbench.getSharedImages().getImage(imageKey);
			return icons.getImage(Icons.Type.DOMAIN);
//			return execute.createImage();
		}

		@Override
		public Image getColumnImage(Object element, int col) {
			if (col > 1) return null;
			return icons.getImage(Icons.Type.vAPP);
		}

		@Override
		public String getColumnText(Object obj, int col) {
			if (obj instanceof TreeNode) {
				TreeNode o = (TreeNode)obj;
				if (col > o.content.length-1) return "toobig2:" + obj.toString();
				return o.content[col];
			}
			return null;
		}
		
		
		
		
	}

	
	
		